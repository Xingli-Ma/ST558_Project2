scale_fill_discrete(name = "Season")
dayTrainCopy <- dayTrain
levels(dayTrainCopy$yr) <- list("2011" = 0,
"2012" = 1)
levels(dayTrainCopy$season) <- list("Winter" = 1,
"Spring" = 2,
"Summer" = 3,
"Fall" = 4)
g <- ggplot(dayTrainCopy, aes(x = yr, fill = season))
g + geom_bar(aes(weight = cnt)) +
labs(x = "Year", y = "Total User Count") +
scale_fill_discrete(name = "Season")
dayTrainCopy <- dayTrain
levels(dayTrainCopy$yr) <- list("2011" = 0,
"2012" = 1)
levels(dayTrainCopy$season) <- list("Winter" = 1,
"Spring" = 2,
"Summer" = 3,
"Fall" = 4)
g <- ggplot(dayTrainCopy, aes(x = yr, fill = season))
g + geom_bar(aes(weight = cnt), position = "stack") +
labs(x = "Year", y = "Total User Count") +
scale_fill_discrete(name = "Season")
ggplot(dayTrain, aes(x = temp, y = cnt)) +
geom_point(stat = "identity") +
geom_smooth(data = dayTrain, aes(x = temp, y = cnt), method = "lm")
ggplot(dayTrain, aes(x = temp, y = cnt)) +
geom_point(stat = "identity") +
geom_smooth(data = dayTrain, aes(x = temp, y = cnt), method = "lm") +
labs(x = "Temperature", y = "Total User Count") +
ggplot(dayTrain, aes(x = temp, y = cnt)) +
geom_point(stat = "identity") +
geom_smooth(data = dayTrain, aes(x = temp, y = cnt), method = "lm") +
labs(x = "Temperature", y = "Total User Count")
ggplot(dayTrain, aes(x = temp, y = cnt)) +
geom_point(stat = "identity") +
geom_smooth(data = dayTrain, aes(x = temp, y = cnt), method = "glm", family = "poisson") +
labs(x = "Temperature", y = "Total User Count")
ggplot(dayTrain, aes(x = temp, y = cnt)) +
geom_point(stat = "identity") +
geom_smooth(method = "lm", formula = cnt ~ temp + I(temp^2)) +
labs(x = "Temperature", y = "Total User Count")
ggplot(cars, aes(x = temp, y = cnt)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ x + I(x^2))
ggplot(cars, aes(x = temp, y = cnt)) +
geom_point() +
geom_smooth(method = "lm", formula = count ~ temp + I(temp^2))
ggplot(dayTrain, aes(x = temp, y = cnt)) +
geom_point() +
geom_smooth(method = "lm", formula = count ~ temp + I(temp^2))
ggplot(dayTrain, aes(x = temp, y = cnt)) +
geom_point(stat = "identity") +
geom_smooth(method = "lm", formula = cnt ~ temp + I(temp^2)) +
labs(x = "Temperature", y = "Total User Count")
ggplot(dayTrain, aes(x = temp, y = cnt)) +
geom_point(stat = "identity") +
geom_smooth(data = dayTrain, aes(x = temp, y = cnt), method = "lm") +
labs(x = "Temperature", y = "Total User Count")
ggplot(dayTrain, aes(x = temp, y = cnt, group = season)) +
geom_point(stat = "identity") +
geom_smooth(data = dayTrain, aes(x = temp, y = cnt), method = "lm") +
labs(x = "Temperature", y = "Total User Count")
ggplot(dayTrain, aes(x = temp, y = cnt)) +
geom_point(stat = "identity") +
geom_smooth(data = dayTrain, aes(x = temp, y = cnt), method = "lm") +
labs(x = "Temperature", y = "Total User Count")
ggplot(dayTrain, aes(x = temp, y = cnt, group = workingday)) +
geom_point(stat = "identity") +
geom_smooth(data = dayTrain, aes(x = temp, y = cnt), method = "lm") +
labs(x = "Temperature", y = "Total User Count")
ggplot(dayTrain, aes(x = temp, y = cnt, group = workingday)) +
geom_point(stat = "identity", aes(col = workingday)) +
geom_smooth(data = dayTrain, aes(x = temp, y = cnt), method = "lm") +
labs(x = "Temperature", y = "Total User Count")
ggplot(dayTrain, aes(x = temp, y = cnt, group = workingday)) +
geom_point(stat = "identity", aes(col = workingday)) +
geom_smooth(data = dayTrain, aes(x = temp, y = cnt), method = "lm") +
labs(x = "Temperature", y = "Total User Count")
ggplot(dayTrain, aes(x = temp, y = cnt)) +
geom_point(stat = "identity") +
geom_smooth(data = dayTrain, aes(x = temp, y = cnt), method = "lm") +
labs(x = "Temperature", y = "Total User Count")
g <- ggplot(dayTrain, aes(x = mnth, y = cnt))
g + geom_boxplot() +
geom_point(aes(col = mnth), alpha = 1, size = 1, position = "jitter") +
labs(title = "Boxplot for Number of Users by Month", x = "Month", y = "Number of Users")
g <- ggplot(dayTrain, aes(x = mnth, y = cnt))
g + geom_boxplot() +
geom_point(aes(col = mnth), alpha = 1, size = 1, position = "jitter") +
labs(title = "Boxplot for Number of Users by Month",
x = "Month",
y = "Number of Users") +
guides(fill = guide_legend(title="New Legend Title"))
g <- ggplot(dayTrain, aes(x = mnth, y = cnt))
g + geom_boxplot() +
geom_point(aes(col = mnth), alpha = 1, size = 1, position = "jitter") +
labs(title = "Boxplot for Number of Users by Month",
x = "Month",
y = "Number of Users") +
guide_legend(title="New Legend Title")
g <- ggplot(dayTrain, aes(x = mnth, y = cnt))
g + geom_boxplot() +
geom_point(aes(col = mnth), alpha = 1, size = 1, position = "jitter") +
labs(title = "Boxplot for Number of Users by Month",
x = "Month",
y = "Number of Users") +
guides(fill = guide_legend(title="New Legend Title"))
g <- ggplot(dayTrain, aes(x = mnth, y = cnt))
g + geom_boxplot() +
geom_point(aes(col = mnth), alpha = 1, size = 1, position = "jitter") +
labs(title = "Boxplot for Number of Users by Month",
x = "Month",
y = "Number of Users",
fill='NEW LEGEND TITLE')
g <- ggplot(dayTrain, aes(x = mnth, y = cnt))
g + geom_boxplot() +
geom_point(aes(col = mnth), alpha = 1, size = 1, position = "jitter") +
labs(title = "Boxplot for Number of Users by Month",
x = "Month",
y = "Number of Users",
color='NEW LEGEND TITLE')
g <- ggplot(dayTrain, aes(x = mnth, y = cnt))
g + geom_boxplot() +
geom_point(aes(col = mnth), alpha = 1, size = 1, position = "jitter") +
labs(title = "Boxplot for Number of Users by Month",
x = "Month",
y = "Number of Users",
color='Month')
dayTrainCopy <- dayTrain
levels(dayTrainCopy$mnth) <- list(c("Jan", "Feb") = c(0, 1))
g <- ggplot(dayTrain, aes(x = mnth, y = cnt))
g + geom_boxplot() +
geom_point(aes(col = mnth), alpha = 1, size = 1, position = "jitter") +
labs(title = "Boxplot for Number of Users by Month",
x = "Month",
y = "Number of Users",
color='Month')
dayTrainCopy <- dayTrain
levels(dayTrainCopy$yr) <- list("Jan" = 1, "Feb" = 2, "Mar" = 3, "Apr" = 4,
"May" = 5, "Jun" = 6, "Jul" = 7, "Aug" = 8,
"Sep" = 9, "Oct" = 10, "Nov" = 11, "Dec" = 12)
g <- ggplot(dayTrain, aes(x = mnth, y = cnt))
g + geom_boxplot() +
geom_point(aes(col = mnth), alpha = 1, size = 1, position = "jitter") +
labs(title = "Boxplot for Number of Users by Month",
x = "Month",
y = "Number of Users",
color='Month')
dayTrainCopy <- dayTrain
levels(dayTrainCopy$mnth) <- list("Jan" = 1, "Feb" = 2, "Mar" = 3, "Apr" = 4,
"May" = 5, "Jun" = 6, "Jul" = 7, "Aug" = 8,
"Sep" = 9, "Oct" = 10, "Nov" = 11, "Dec" = 12)
g <- ggplot(dayTrain, aes(x = mnth, y = cnt))
g + geom_boxplot() +
geom_point(aes(col = mnth), alpha = 1, size = 1, position = "jitter") +
labs(title = "Boxplot for Number of Users by Month",
x = "Month",
y = "Number of Users",
color='Month')
dayTrainCopy <- dayTrain
levels(dayTrainCopy$mnth) <- list("Jan" = 1, "Feb" = 2, "Mar" = 3, "Apr" = 4,
"May" = 5, "Jun" = 6, "Jul" = 7, "Aug" = 8,
"Sep" = 9, "Oct" = 10, "Nov" = 11, "Dec" = 12)
g <- ggplot(dayTrainCopy, aes(x = mnth, y = cnt))
g + geom_boxplot() +
geom_point(aes(col = mnth), alpha = 1, size = 1, position = "jitter") +
labs(title = "Boxplot for Number of Users by Month",
x = "Month",
y = "Number of Users",
color='Month')
dayTrainCopy <- dayTrain
levels(dayTrainCopy$mnth) <- list("Jan" = 1, "Feb" = 2, "Mar" = 3, "Apr" = 4,
"May" = 5, "Jun" = 6, "Jul" = 7, "Aug" = 8,
"Sep" = 9, "Oct" = 10, "Nov" = 11, "Dec" = 12)
g <- ggplot(dayTrainCopy, aes(x = mnth, y = cnt))
g + geom_boxplot(aes(weight = cnt)) +
geom_point(aes(col = mnth), alpha = 1, size = 1, position = "jitter") +
labs(title = "Boxplot for Number of Users by Month",
x = "Month",
y = "Number of Users",
color='Month')
dayTrainCopy <- dayTrain
levels(dayTrainCopy$mnth) <- list("Jan" = 1, "Feb" = 2, "Mar" = 3, "Apr" = 4,
"May" = 5, "Jun" = 6, "Jul" = 7, "Aug" = 8,
"Sep" = 9, "Oct" = 10, "Nov" = 11, "Dec" = 12)
g <- ggplot(dayTrain, aes(x = mnth, y = cnt))
g + geom_boxplot() +
geom_point(aes(col = mnth), alpha = 1, size = 1, position = "jitter") +
labs(title = "Boxplot for Number of Users by Month",
x = "Month",
y = "Number of Users",
color='Month')
dayTrainCopy <- dayTrain
levels(dayTrainCopy$mnth) <- list("Jan" = 1, "Feb" = 2, "Mar" = 3, "Apr" = 4,
"May" = 5, "Jun" = 6, "Jul" = 7, "Aug" = 8,
"Sep" = 9, "Oct" = 10, "Nov" = 11, "Dec" = 12)
g <- ggplot(dayTrainCopy, aes(x = mnth, y = cnt))
g + geom_boxplot() +
geom_point(aes(col = mnth), alpha = 1, size = 1, position = "jitter") +
labs(title = "Boxplot for Number of Users by Month",
x = "Month",
y = "Number of Users",
color='Month')
dayTrainCopy
min(dayTrainCopy$cnt)
mean(filter(dayTrainCopy, mnth=10))
dayTrainCopyOct <- filter(dayTrainCopy, mnth=10)
dayTrainCopyOct <- filter(dayTrainCopy, mnth="Oct")
dayTrainCopyOct <- filter(dayTrain, mnth="Oct")
dayTrainCopyOct <- filter(dayTrain, mnth=10)
dayTrainCopyOct <- filter(dayTrain, mnth==10)
dayTrainCopyOct
mean(dayTrainCopyOct$cnt)
dayTrainCopy <- dayTrain
levels(dayTrainCopy$mnth) <- list("Jan" = 1, "Feb" = 2, "Mar" = 3, "Apr" = 4,
"May" = 5, "Jun" = 6, "Jul" = 7, "Aug" = 8,
"Sep" = 9, "Oct" = 10, "Nov" = 11, "Dec" = 12)
g <- ggplot(dayTrainCopy, aes(x = mnth, y = cnt))
g + geom_boxplot() +
geom_point(aes(col = mnth), alpha = 1, size = 1, position = "jitter") +
labs(title = "Boxplot for Number of Users by Month",
x = "Month",
y = "Number of Users",
color='Month')
# Set up fold number (10) for the cross validation and the repeated times (5) of the whole CV
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
# Set seed for reproducible
set.seed(123)
# Fit the random forest model with cnt as response and all other variables as
# predictors on training set
rfFit <- train(cnt ~ temp, data = dayTrain,
method = "lm",
preProcess = c("center", "scale"),
trControl = trctrl)
rfFit
# Set up fold number (10) for the cross validation and the repeated times (5) of the whole CV
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
# Set seed for reproducible
set.seed(123)
# Fit the random forest model with cnt as response and all other variables as
# predictors on training set
rfFit <- train(cnt ~ weatherslt + temp + atemp + hum + windspeed,
data = dayTrain,
method = "lm",
preProcess = c("center", "scale"),
trControl = trctrl)
rfFit
dayTrain
# Set up fold number (10) for the cross validation and the repeated times (5) of the whole CV
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
# Set seed for reproducible
set.seed(123)
# Fit the random forest model with cnt as response and all other variables as
# predictors on training set
rfFit <- train(cnt ~ weathersit + temp + atemp + hum + windspeed,
data = dayTrain,
method = "lm",
preProcess = c("center", "scale"),
trControl = trctrl)
rfFit
# Set up fold number (10) for the cross validation and the repeated times (5) of the whole CV
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
# Set seed for reproducible
set.seed(123)
# Fit the random forest model with cnt as response and all other variables as
# predictors on training set
rfFit <- train(cnt ~ weathersit*temp*atemp*hum*windspeed,
data = dayTrain,
method = "lm",
preProcess = c("center", "scale"),
trControl = trctrl)
rfFit
# Set up fold number (10) for the cross validation and the repeated times (5) of the whole CV
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
# Set seed for reproducible
set.seed(123)
# Fit the random forest model with cnt as response and all other variables as
# predictors on training set
rfFit <- train(cnt ~ weathersit + temp + atemp + hum + windspeed,
data = dayTrain,
method = "lm",
preProcess = c("center", "scale"),
trControl = trctrl)
rfFit
# Set up fold number (10) for the cross validation and the repeated times (5) of the whole CV
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
# Set seed for reproducible
set.seed(123)
# Fit the random forest model with cnt as response and all other variables as
# predictors on training set
rfFit <- train(cnt ~ weathersit + temp + atemp + hum + windspeed +
I(`weathersit`^2) + I(`temp`^2) + I(`atemp`^2) + I(`hum`^2) +
I(`windspeed`^2),
data = dayTrain,
method = "lm",
preProcess = c("center", "scale"),
trControl = trctrl)
rfFit
# Set up fold number (10) for the cross validation and the repeated times (5) of the whole CV
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
# Set seed for reproducible
set.seed(123)
# Fit the random forest model with cnt as response and all other variables as
# predictors on training set
rfFit <- train(cnt ~ weathersit + temp + atemp + hum + windspeed +
I(`temp`^2) + I(`atemp`^2) + I(`hum`^2) +
I(`windspeed`^2),
data = dayTrain,
method = "lm",
preProcess = c("center", "scale"),
trControl = trctrl)
rfFit
# Set up fold number (10) for the cross validation and the repeated times (5) of the whole CV
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
# Set seed for reproducible
set.seed(123)
# Fit the random forest model with cnt as response and all other variables as
# predictors on training set
rfFit <- train(cnt ~ temp + atemp + hum + windspeed +
I(`temp`^2) + I(`atemp`^2) + I(`hum`^2) +
I(`windspeed`^2),
data = dayTrain,
method = "lm",
preProcess = c("center", "scale"),
trControl = trctrl)
rfFit
# Set up fold number (10) for the cross validation and the repeated times (5) of the whole CV
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
# Set seed for reproducible
set.seed(123)
# Fit the random forest model with cnt as response and all other variables as
# predictors on training set
rfFit <- train(cnt ~ weathersit + temp + atemp + hum + windspeed +
I(`temp`^2) + I(`atemp`^2) + I(`hum`^2) +
I(`windspeed`^2),
data = dayTrain,
method = "lm",
preProcess = c("center", "scale"),
trControl = trctrl)
rfFit
# Set up fold number (10) for the cross validation and the repeated times (5) of the whole CV
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
# Set seed for reproducible
set.seed(123)
# Fit the random forest model with cnt as response and all other variables as
# predictors on training set
rfFit <- train(cnt ~ weathersit + temp + atemp + hum + windspeed +
I(`temp`^2) + I(`atemp`^2) + I(`hum`^2) +
I(`windspeed`^2),
data = dayTrain,
method = "glm",
preProcess = c("center", "scale"),
trControl = trctrl)
rfFit
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, message = FALSE, warning = FALSE, error = TRUE)
# Set up fold number (10) for the cross validation and the repeated times (5) of the whole CV
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
# Set seed for reproducible
set.seed(123)
# Fit the linear regression model with cnt as response and weather predictors on training set
glmFit <- train(cnt ~ .,
data = select(dayTrain, -c(registered, casual)),
method = "glm",
preProcess = c("center", "scale"),
trControl = trctrl)
glmFit
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, message = FALSE, warning = FALSE, error = TRUE)
library(tidyverse)
library(knitr)
library(caret)
# Read and clean data
dayData <- read_csv("day.csv")
dayData <- filter(dayData, weekday == params$day)
dayData <- select(dayData, -c(instant, weekday))
dayData$dteday = as.Date(dayData$dteday, format = "%Y-%m-%d")
# Split data to train and test sets
set.seed(1)
dayIndex <- createDataPartition(dayData$cnt, p = 0.7, list = FALSE)
dayTrain <- dayData[dayIndex, ]
dayTest <- dayData[-dayIndex, ]
# Convert categorical variables to factors
cols <- c("season", "yr", "mnth", "holiday", "workingday", "weathersit")
dayTrain[cols] <- lapply(dayTrain[cols], factor)
dayTest[cols] <- lapply(dayTest[cols], factor)
# Set up fold number (10) for the cross validation and the repeated times (5) of the whole CV
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
# Set seed for reproducible
set.seed(123)
# Fit the linear regression model with cnt as response and weather predictors on training set
glmFit <- train(cnt ~ .,
data = select(dayTrain, -c(registered, casual)),
method = "glm",
preProcess = c("center", "scale"),
trControl = trctrl)
glmFit
# Set up fold number (10) for the cross validation and the repeated times (5) of the whole CV
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
# Set seed for reproducible
set.seed(123)
# Fit the linear regression model with cnt as response and weather predictors on training set
glmFit <- train(cnt ~ .^2,
data = select(dayTrain, -c(registered, casual)),
method = "glm",
preProcess = c("center", "scale"),
trControl = trctrl)
glmFit
# Set up fold number (10) for the cross validation and the repeated times (5) of the whole CV
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
# Set seed for reproducible
set.seed(123)
# Fit the linear regression model with cnt as response and weather predictors on training set
glmFit <- train(cnt ~ .,
data = select(dayTrain, -c(registered, casual)),
method = "glm",
preProcess = c("center", "scale"),
trControl = trctrl)
glmFit
# Set up fold number (10) for the cross validation and the repeated times (5) of the whole CV
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
# Set seed for reproducible
set.seed(123)
# Fit the random forest model with cnt as response and all other variables as
# predictors on training set
rfFit <- train(cnt ~ ., data = select(dayTrain, -c(registered, casual)),
method = "rf",
preProcess = c("center", "scale"),
trControl = trctrl)
rfFit
# Set up fold number (10) for the cross validation and the repeated times (5) of the whole CV
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
# Set seed for reproducible
set.seed(123)
# Fit the linear regression model with cnt as response and weather predictors on training set
glmFit <- train(cnt ~ .,
data = select(dayTrain, -c(registered, casual)),
method = "glm",
family = "poisson",
preProcess = c("center", "scale"),
trControl = trctrl)
glmFit
# Set up fold number (10) for the cross validation and the repeated times (5) of the whole CV
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
# Set seed for reproducible
set.seed(123)
# Fit the linear regression model with cnt as response and weather predictors on training set
glmFit <- train(cnt ~ .^2,
data = select(dayTrain, -c(registered, casual)),
method = "glm",
family = "poisson",
preProcess = c("center", "scale"),
trControl = trctrl)
glmFit
# Set up fold number (10) for the cross validation and the repeated times (5) of the whole CV
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
# Set seed for reproducible
set.seed(123)
# Fit the linear regression model with cnt as response and weather predictors on training set
glmFit <- train(cnt ~ .,
data = select(dayTrain, -c(registered, casual)),
method = "lm",
preProcess = c("center", "scale"),
trControl = trctrl)
glmFit
# Set up fold number (10) for the cross validation and the repeated times (5) of the whole CV
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
# Set seed for reproducible
set.seed(123)
# Fit the linear regression model with cnt as response and weather predictors on training set
glmFit <- train(cnt ~ .,
data = select(dayTrain, -c(registered, casual)),
method = "lm",
family = "binomial",
preProcess = c("center", "scale"),
trControl = trctrl)
glmFit
# Set up fold number (10) for the cross validation and the repeated times (5) of the whole CV
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
# Set seed for reproducible
set.seed(123)
# Fit the linear regression model with cnt as response and weather predictors on training set
lmFit <- train(cnt ~ .,
data = select(dayTrain, -c(registered, casual)),
method = "lm",
preProcess = c("center", "scale"),
trControl = trctrl)
lmFit
# Set up fold number (10) for the cross validation and the repeated times (5) of the whole CV
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
# Set seed for reproducible
set.seed(123)
# Fit the linear regression model with cnt as response and weather predictors on training set
lmFit <- train(cnt ~ .,
data = select(dayTrain, -c(registered, casual)),
method = "glm",
family= "poisson",
preProcess = c("center", "scale"),
trControl = trctrl)
lmFit
# Set up fold number (10) for the cross validation and the repeated times (5) of the whole CV
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
# Set seed for reproducible
set.seed(123)
# Fit the linear regression model with cnt as response and weather predictors on training set
glmFit <- train(cnt ~ weathersit + temp + atemp + hum + windspeed +
I(`temp`^2) + I(`atemp`^2) + I(`hum`^2) +
I(`windspeed`^2),
data = select(dayTrain, -c(registered, casual)),
method = "glm",
preProcess = c("center", "scale"),
trControl = trctrl)
glmFit
