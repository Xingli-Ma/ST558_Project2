datatable(summary(dayTrain))
# Summarize training data set
datatable(dayTrain)
# Summarize training data set
datatable(summary(dayTrain))
kable(dayTrain)
# Summarize training data set
datatable(dayTrain)
kable(summary(dayTrain))
require(rmarkdown)
require(knitr)
require(tidyverse)
require(dplyr)
require(ggplot2)
require(caret)
require(DT)
require(corrplot)
CM <- cor(dayTrain)
head(round(CM,2))
corrplot(CM, method="circle")
names(dayTrain)
CM <- cor(dayTrain)
head(round(CM,2))
corrplot(CM, method="circle")
names(dayTrain)
CM <- cor(dayTrain[, c("temp", "atemp", "hum", "windspeed", "cnt")])
head(round(CM,2))
corrplot(CM, method="circle")
require(rmarkdown)
require(knitr)
require(tidyverse)
require(dplyr)
require(ggplot2)
require(caret)
require(DT)
install.packages("corrplot")
require(corrplot)
names(dayTrain)
CM <- cor(dayTrain[, c("temp", "atemp", "hum", "windspeed", "cnt")])
head(round(CM,2))
corrplot(CM, method="circle")
CM <- cor(dayTrain[, c("temp", "atemp", "hum", "windspeed", "cnt")])
corrplot(round(CM,2), method="circle")
# Create a histogram plot
d <- ggplot(dayTrain$weathersit, aes(x=dayTrain$cnt))
d + geom_histogram(bins=20, aes(y=..density..)) +
geom_density(stat="density", adjust=0.4, lwd=3, colour= "red") +
xlab("Total Rental Bikes") + ylab("Density") +
ggtitle("Histogram for Total Rental Bikes")
# Create a histogram plot
d <- ggplot(dayTrain, aes(x=dayTrain$cnt))
d + geom_histogram(bins=20, aes(y=..density..)) +
geom_density(stat="density", adjust=0.4, lwd=3, colour= "red") +
xlab("Total Rental Bikes") + ylab("Density") +
ggtitle("Histogram for Total Rental Bikes")
# Create correlation matrix
CM <- cor(dayTrain[, c("temp", "atemp", "hum", "windspeed", "cnt")])
# Plot the correlation matrix
corrplot(round(CM,2), method="circle")
sc <- ggplot(dayTrain, aes(x = cnt, y = holiday, group = season))
sc + geom_point(aes(color= season)) +
geom_smooth(method=lm, color="green") +
ggtitle("Wins vs Home Wins by Game Type")
sc <- ggplot(dayTrain, aes(x = cnt, group = season))
sc + geom_point(aes(color= season)) +
geom_smooth(method=lm, color="green") +
ggtitle("Total Rental Bikes by Season")
sc <- ggplot(dayTrain, aes(x = workingday, y=cnt, group = season))
sc + geom_point(aes(color= season)) +
geom_smooth(method=lm, color="green") +
ggtitle("Total Rental Bikes by Season")
sc <- ggplot(dayTrain, aes(x = holiday, y=cnt, group = season))
sc + geom_point(aes(color= season)) +
geom_smooth(method=lm, color="green") +
ggtitle("Total Rental Bikes by Season")
# Renaming factor levels
levels(goalie_skater_new$df) <- c("Holiday", "Not holiday")
# Create scatter plot
s <- ggplot(dayTrain, aes(x=cnt,y=season, group=holiday))
s + geom_point(aes(color= holiday)) +
geom_smooth(method=lm, color="green") +
ggtitle("Games Played vs Goals by Game Type")
# Renaming factor levels
levels(dayTrain$holiday) <- c("Holiday", "Not holiday")
# Create scatter plot
s <- ggplot(dayTrain, aes(x=cnt,y=season, group=holiday))
s + geom_point(aes(color= holiday)) +
geom_smooth(method=lm, color="green") +
ggtitle("Games Played vs Goals by Game Type")
require(rmarkdown)
require(knitr)
require(dplyr)
require(tidyverse)
require(ggplot2)
require(DT)
require(Hmisc)
#require(expss)
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, error = TRUE, warning = FALSE, message = FALSE, cache = FALSE)
knitr::include_graphics("C:/Users/Xingli/Documents/ST/ST558/hw7/fisher.jpg")
knitr::kable(iris[1:6,], caption = "Preview of Iris Data")
sumTable <- function(x){
sum1 <- summary((iris %>% filter(Species==x))[,-5])
kable <- knitr::kable(sum1, caption = paste0("Summary of Species ", capitalize(x)))
return(kable)
}
sumTable("setosa")
sumTable("versicolor")
sumTable("virginica")
f <- ggplot(iris, aes(x = Species, y = Sepal.Length))
f + geom_boxplot() +
geom_jitter(geom="point", aes(group = Species, col = Species))
d <- ggplot(iris, aes(x=Sepal.Length))
d + geom_histogram(bins=20, aes(y=..density..)) +
geom_density(stat="density", adjust=0.4, lwd=3, colour= "red") +
xlab("Sepal.Length") + ylab("Density") +
ggtitle("Histogram for Sepal Length")
d <- ggplot(iris, aes(x=Sepal.Length))
d + geom_histogram(binwidth=0.2, aes(y=..density..)) +
geom_density(lwd = 2, colour= "red",
show.legend = FALSE) +
facet_wrap(~ Species, ncol = 3) +
xlab("Sepal.Length") + ylab("Density") +
ggtitle("Histogram for Sepal Length")
s <- ggplot(iris, aes(x=Sepal.Length,y=Sepal.Width, group= Species))
s + geom_point(aes(color= Species)) +
geom_smooth(method=lm, color="green") +
ggtitle("Sepal Length vs Spepal Width")
s <- ggplot(iris, aes(x = Petal.Length, y = Petal.Width, group = Species
))
s + geom_point(aes(color=Species)) +
geom_smooth(method=lm, color="green") +
ggtitle("Petal Length vs Petal Width")
d <- ggplot(dayTrain, aes(x=cnt))
d + geom_histogram(binwidth=0.2, aes(y=..density..)) +
geom_density(lwd = 2, colour= "red",
show.legend = FALSE) +
facet_wrap(~ weathersit, ncol = 4) +
xlab("Sepal.Length") + ylab("Density") +
ggtitle("Histogram for Sepal Length")
# Create a histogram plot for total rental bikes
h <- ggplot(dayTrain, aes(x=cnt))
h + geom_histogram(bins=20, aes(y=..density..)) +
geom_density(stat="density", adjust=0.4, lwd=3, colour= "red") +
xlab("Total Rental Bikes") + ylab("Density") +
ggtitle("Histogram for Total Rental Bikes")
d <- ggplot(dayTrain, aes(x=cnt))
d + geom_histogram(binwidth=0.2, aes(y=..density..)) +
geom_density(lwd = 2, colour= "red",
show.legend = FALSE) +
facet_wrap(~ weathersit, ncol = 4) +
xlab("Sepal.Length") + ylab("Density") +
ggtitle("Histogram for Sepal Length")
d <- ggplot(dayTrain, aes(x=cnt))
d + geom_histogram(binwidth=0.2, aes(y=..density..)) +
geom_density(lwd = 2, colour= "red",
show.legend = FALSE) +
facet_wrap(~ holiday, ncol = 2) +
xlab("Sepal.Length") + ylab("Density") +
ggtitle("Histogram for Sepal Length")
d <- ggplot(dayTrain, aes(x=cnt))
d + geom_histogram(binwidth=0.2, aes(y=..density..)) +
geom_density(lwd = 2, colour= "red",
show.legend = FALSE) +
facet_wrap(~ holiday, ncol = 2) +
xlab("Total Rental Bikes") + ylab("Density") +
ggtitle("Histogram for Total Rental Bikes")
d <- ggplot(iris, aes(x=Sepal.Length))
d + geom_histogram(binwidth=0.2, aes(y=..density..)) +
geom_density(lwd = 2, colour= "red",
show.legend = FALSE) +
facet_wrap(~ Species, ncol = 3) +
xlab("Sepal.Length") + ylab("Density") +
ggtitle("Histogram for Sepal Length")
d <- ggplot(dayTrain, aes(x=cnt))
d + geom_histogram(binwidth=0.2, aes(y=..density..)) +
geom_density(lwd = 2, colour= "red",
show.legend = FALSE) +
facet_wrap(~ holiday, ncol = 2) +
xlab("Total Rental Bikes") + ylab("Density") +
ggtitle("Histogram for Total Rental Bikes")
# Create a histogram plot for total rental bikes
d <- ggplot(dayTrain, aes(x=cnt))
d + geom_histogram(bins=20, aes(y=..density..)) +
geom_density(stat="density", adjust=0.4, lwd=3, colour= "red") +
facet_wrap(~ holiday, ncol = 2) +
xlab("Total Rental Bikes") + ylab("Density") +
ggtitle("Histogram for Total Rental Bikes")
# Create a histogram plot for total rental bikes
d <- ggplot(dayTrain, aes(x=cnt))
d + geom_histogram(bins=20, aes(y=..density..)) +
geom_density(stat="density", adjust=0.4, lwd=3, colour= "red") +
facet_wrap(~ season, ncol = 2) +
xlab("Total Rental Bikes") + ylab("Density") +
ggtitle("Histogram for Total Rental Bikes")
# Create a histogram plot for total rental bikes
d <- ggplot(dayTrain, aes(x=cnt))
d + geom_histogram(bins=20, aes(y=..density..)) +
geom_density(stat="density", adjust=0.4, lwd=3, colour= "red") +
facet_wrap(~ weathersit, ncol = 2) +
xlab("Total Rental Bikes") + ylab("Density") +
ggtitle("Histogram for Total Rental Bikes")
# Create a histogram plot for total rental bikes
d <- ggplot(dayTrain, aes(x=cnt))
d + geom_histogram(bins=20, aes(y=..density..)) +
geom_density(stat="density", adjust=0.4, lwd=3, colour= "red") +
facet_wrap(~ season, ncol = 2) +
xlab("Total Rental Bikes") + ylab("Density") +
ggtitle("Histogram for Total Rental Bikes")
# Create a histogram plot for total rental bikes
d <- ggplot(dayTrain, aes(x=cnt))
d + geom_histogram(bins=20, aes(y=..density..)) +
geom_density(stat="density", adjust=0.4, lwd=3, colour= "red") +
facet_wrap(~ season, ncol = 2) +
xlab("Total Rental Bikes") + ylab("Density") +
ggtitle("Histogram for Total Rental Bikes by Season")
# Define training control
trctrl <- trainControl(method = "cv", number = 10)
# Set seed for reproducible
set.seed(123)
# Fit the linear regression model with cnt as response and weather data as predictors
Fit1 <- train(cnt ~ weathersit + temp + atemp + hum + windspeed +
I(`temp`^2) + I(`atemp`^2) + I(`hum`^2) +
I(`windspeed`^2),
data = select(dayTrain, -c(registered, casual)),
method = "glm",
preProcess = c("center", "scale"),
trControl = trctrl)
Fit1
set.seed(123)
# Fit Poisson model on traing set
Fit2 <- train(cnt ~ ., data = select(dayTrain, -c(registered, casual)),
method = "glm",
family = "poisson",
preProcess = c("center", "scale"),
trControl = trctrl)
Fit2
set.seed(123)
# Fit the random forest model on training set
Fit3 <- train(cnt ~ ., data = select(dayTrain, -c(registered, casual)),
method = "rf",
preProcess = c("center", "scale"),
trControl = trctrl)
Fit3
set.seed(123)
# Set up tuning parameters
gbmGrid <-  expand.grid(interaction.depth = c(1, 2, 3, 4, 5, 10),
n.trees = c(50, 100, 150),
shrinkage = seq(0.05, 0.2, 0.01),
n.minobsinnode = c(5, 10, 15, 20))
# Fit the boosted tree model on training set
boostedTree_fit <- train(class ~., data = diabetesDataTrain,
method = "gbm",
trControl = trctrl, # Passing trainControl() method
preProcess = c("center", "scale"), # Standardize the training dataset
tuneGrid = gbmGrid,
verbose = FALSE)
boostedTree_fit
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, error = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
require(rmarkdown)
require(knitr)
require(tidyverse)
require(dplyr)
require(ggplot2)
require(caret)
require(DT)
#install.packages("corrplot")
require(corrplot)
# Read and clean data
dayData <- read_csv("day.csv")
dayData <- filter(dayData, weekday == params$day)
dayData <- select(dayData, -c(instant, weekday))
dayData$dteday = as.Date(dayData$dteday, format = "%Y-%m-%d")
# Split data to train and test sets
set.seed(1)
dayIndex <- createDataPartition(dayData$cnt, p = 0.7, list = FALSE)
dayTrain <- dayData[dayIndex, ]
dayTest <- dayData[-dayIndex, ]
# Convert categorical variables to factors
cols <- c("season", "yr", "mnth", "holiday", "workingday", "weathersit")
dayTrain[cols] <- lapply(dayTrain[cols], factor)
dayTest[cols] <- lapply(dayTest[cols], factor)
# Summarize training data set
datatable(dayTrain)
# Display the training data set
kable(summary(dayTrain))
# Contingency table comparing number of users by season
dayTrainCopy <- dayTrain
dayTrainCopy$cntRange <- cut(dayTrainCopy$cnt, c(0, 2000, 4000, 6000))
levels(dayTrainCopy$cntRange) = c("<2000", "2001-4000", "4001-6000", ">6000")
levels(dayTrainCopy$season) <- list("Winter" = 1,
"Spring" = 2,
"Summer" = 3,
"Fall" = 4)
twoWayTab <- table(dayTrainCopy$season,
dayTrainCopy$cntRange)
# Comparing Number of Users by Season
kable(twoWayTab, caption = 'Season and Total Number of Users')
# Renaming factor levels
levels(dayTrain$workingday) <- c("neither weekend nor holiday", "weekend or holiday")
levels(crabData$spine) <- c("Both Good",	"One Worn/Broken",	"Both Worn/Broken")
levels(crabData$y) <- c("No Satellite", "At least 1 Satellite")
# Display the crabs data
datatable(crabData, colnames = c("Color", "Spine Condition", "Width", "Satellites", "Present	Weight", "Satellite Indicator"))
# Comparing Number of Users by whether day is workingday or not (if day is neither weekend nor holiday is 1, otherwise is 0)
tapply(X=dayTrain$cnt, INDEX=dayTrain$workingday, summary)
# Comparing Number of Users by weather conditions (1: Clear; 2: Mist + Cloudy; 3: Light Snow + Light Rain; 4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog)
tapply(X=dayTrain$cnt, INDEX=dayTrain$weathersit, summary)
# Subset by columns we want to analyze
userCountStats <- dayTrain[ , c("casual", "registered", "cnt", "yr")]
colnames(userCountStats) <- c("Casual Users", "Registered Users", "Total Users", "Year")
# Function for summary statistics for casual and registered user counts
userCountsFiltered <- filter(userCountStats, Year == 0)[, -4]
kable(do.call(cbind, lapply(userCountsFiltered, summary, digits = 3)),
caption = "Summary of 2011")
# Function for summary statistics for casual and registered user counts
userCountsFiltered <- filter(userCountStats, Year == 1)[, -4]
kable(do.call(cbind, lapply(userCountsFiltered, summary, digits = 3)),
caption = "Summary of 2012")
dayTrainCopy <- dayTrain
levels(dayTrainCopy$yr) <- list("2011" = 0,
"2012" = 1)
levels(dayTrainCopy$season) <- list("Winter" = 1,
"Spring" = 2,
"Summer" = 3,
"Fall" = 4)
g <- ggplot(dayTrainCopy, aes(x = yr, fill = season))
g + geom_bar(aes(weight = cnt), position = "stack") +
labs(x = "Year", y = "Total User Count") +
scale_fill_discrete(name = "Season")
ggplot(dayTrain, aes(x = temp, y = cnt)) +
geom_point(stat = "identity") +
geom_smooth(data = dayTrain, aes(x = temp, y = cnt), method = "lm") +
labs(x = "Temperature", y = "Total User Count")
dayTrainCopy <- dayTrain
levels(dayTrainCopy$mnth) <- list("Jan" = 1, "Feb" = 2, "Mar" = 3, "Apr" = 4,
"May" = 5, "Jun" = 6, "Jul" = 7, "Aug" = 8,
"Sep" = 9, "Oct" = 10, "Nov" = 11, "Dec" = 12)
g <- ggplot(dayTrainCopy, aes(x = mnth, y = cnt))
g + geom_boxplot() +
geom_point(aes(col = mnth), alpha = 1, size = 1, position = "jitter") +
labs(title = "Boxplot for Number of Users by Month",
x = "Month",
y = "Number of Users",
color='Month')
# Create correlation matrix
CM <- cor(dayTrain[, c("temp", "atemp", "hum", "windspeed", "cnt")])
# Plot the correlation matrix
corrplot(round(CM,2), method="circle")
# Create a histogram plot for total rental bikes
h <- ggplot(dayTrain, aes(x=cnt))
h + geom_histogram(bins=20, aes(y=..density..)) +
geom_density(stat="density", adjust=0.4, lwd=3, colour= "red") +
xlab("Total Rental Bikes") + ylab("Density") +
ggtitle("Histogram for Total Rental Bikes")
# Create a histogram plot for total rental bikes
d <- ggplot(dayTrain, aes(x=cnt))
d + geom_histogram(bins=20, aes(y=..density..)) +
geom_density(stat="density", adjust=0.4, lwd=3, colour= "red") +
facet_wrap(~ season, ncol = 2) +
xlab("Total Rental Bikes") + ylab("Density") +
ggtitle("Histogram for Total Rental Bikes by Season")
# Define training control
trctrl <- trainControl(method = "cv", number = 10)
# Set seed for reproducible
set.seed(123)
# Fit the linear regression model with cnt as response and weather data as predictors
fit1 <- train(cnt ~ weathersit + temp + atemp + hum + windspeed +
I(`temp`^2) + I(`atemp`^2) + I(`hum`^2) +
I(`windspeed`^2),
data = select(dayTrain, -c(registered, casual)),
method = "glm",
preProcess = c("center", "scale"),
trControl = trctrl)
fit1
set.seed(123)
# Fit Poisson model on traing set
fit2 <- train(cnt ~ ., data = select(dayTrain, -c(registered, casual)),
method = "glm",
family = "poisson",
preProcess = c("center", "scale"),
trControl = trctrl)
fit2
set.seed(123)
# Fit the random forest model on training set
fit3 <- train(cnt ~ ., data = select(dayTrain, -c(registered, casual)),
method = "rf",
preProcess = c("center", "scale"),
trControl = trctrl)
fit3
set.seed(123)
# Fit the boosted tree model on training set
fit4 <- train(class ~., data = diabetesDataTrain,
method = "gbm",
trControl = trctrl, # Passing trainControl() method
preProcess = c("center", "scale"), # Standardize the training dataset
verbose = FALSE)
fit4
# Create a histogram plot for total rental bikes
d <- ggplot(dayTrain, aes(x=cnt))
d + geom_histogram(bins=20, aes(y=..density..)) +
geom_density(stat="density", adjust=0.4, lwd=2, colour= "red") +
facet_wrap(~ season, ncol = 2) +
xlab("Total Rental Bikes") + ylab("Density") +
ggtitle("Histogram for Total Rental Bikes by Season")
# Create a histogram plot for total rental bikes
h <- ggplot(dayTrain, aes(x=cnt))
h + geom_histogram(bins=20, aes(y=..density..)) +
geom_density(stat="density", adjust=0.4, lwd=2, colour= "red") +
xlab("Total Rental Bikes") + ylab("Density") +
ggtitle("Histogram for Total Rental Bikes")
# Define training control
trctrl <- trainControl(method = "cv", number = 10)
# Set seed for reproducible
set.seed(123)
# Fit the linear regression model with cnt as response and weather data as predictors
fit1 <- train(cnt ~ weathersit + temp + atemp + hum + windspeed +
I(`temp`^2) + I(`atemp`^2) + I(`hum`^2) +
I(`windspeed`^2),
data = select(dayTrain, -c(registered, casual)),
method = "glm",
preProcess = c("center", "scale"),
trControl = trctrl)
rmse(fit1)
require(rmarkdown)
require(knitr)
require(tidyverse)
require(dplyr)
require(ggplot2)
require(caret)
require(DT)
#install.packages("corrplot")
require(corrplot)
require(qpcR)
# Define training control
trctrl <- trainControl(method = "cv", number = 10)
# Set seed for reproducible
set.seed(123)
# Fit the linear regression model with cnt as response and weather data as predictors
fit1 <- train(cnt ~ weathersit + temp + atemp + hum + windspeed +
I(`temp`^2) + I(`atemp`^2) + I(`hum`^2) +
I(`windspeed`^2),
data = select(dayTrain, -c(registered, casual)),
method = "glm",
preProcess = c("center", "scale"),
trControl = trctrl)
rmse(fit1)
# Define training control
trctrl <- trainControl(method = "cv", number = 10)
# Set seed for reproducible
set.seed(123)
# Fit the linear regression model with cnt as response and weather data as predictors
fit1 <- train(cnt ~ weathersit + temp + atemp + hum + windspeed +
I(`temp`^2) + I(`atemp`^2) + I(`hum`^2) +
I(`windspeed`^2),
data = select(dayTrain, -c(registered, casual)),
method = "glm",
preProcess = c("center", "scale"),
trControl = trctrl)
fit1
set.seed(123)
# Fit Poisson model on traing set
fit2 <- train(cnt ~ ., data = select(dayTrain, -c(registered, casual)),
method = "glm",
family = "poisson",
preProcess = c("center", "scale"),
trControl = trctrl)
fit2
set.seed(123)
# Fit Poisson model on traing set
fit2 <- train(cnt ~ ., data = dayTrain[,-c(registered, casual)],
method = "glm",
family = "poisson",
preProcess = c("center", "scale"),
trControl = trctrl)
fit2
set.seed(123)
# Fit Poisson model on traing set
fit2 <- train(cnt ~ ., data = dayTrain[,-c(registered, casual)],
method = "glm",
family = "poisson",
preProcess = c("center", "scale"),
trControl = trctrl)
fit2
set.seed(123)
# Fit Poisson model on traing set
fit2 <- train(cnt ~ ., data = dayTrain[,-c("registered", "casual")],
method = "glm",
family = "poisson",
preProcess = c("center", "scale"),
trControl = trctrl)
fit2
set.seed(123)
# Fit Poisson model on traing set
fit2 <- train(cnt ~ ., data = select(dayTrain, -c(registered, casual)),,
method = "glm",
family = "poisson",
preProcess = c("center", "scale"),
trControl = trctrl)
fit2
# Define training control
trctrl <- trainControl(method = "cv", number = 10)
# Set seed for reproducible
set.seed(123)
# Fit the linear regression model with cnt as response and weather data as predictors
fit1 <- train(cnt ~ weathersit + temp + atemp + hum + windspeed +
I(`temp`^2) + I(`atemp`^2) + I(`hum`^2) +
I(`windspeed`^2),
data = select(dayTrain, -c(registered, casual)),
method = "glm",
preProcess = c("center", "scale"),
trControl = trctrl)
fit1
