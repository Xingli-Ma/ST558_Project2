mondayTest <- mondayData[-mondayIndex, ]
head(mondayTrain)
dayData <- read_csv("day.csv")
mondayData <- dayData %>% filter(dayData, weekday == 1)
str(mondayData)
set.seed(1)
mondayIndex <- createDataPartition(mondayData$cnt, p = 0.7, list = FALSE)
mondayTrain <- mondayData[mondayIndex, ]
mondayTest <- mondayData[-mondayIndex, ]
head(mondayTrain)
dayData <- read_csv("day.csv")
mondayData <- dayData %>% filter(weekday == 1)
str(mondayData)
set.seed(1)
mondayIndex <- createDataPartition(mondayData$cnt, p = 0.7, list = FALSE)
mondayTrain <- mondayData[mondayIndex, ]
mondayTest <- mondayData[-mondayIndex, ]
head(mondayTrain)
dayData <- read_csv("day.csv")
mondayData <- filter(dayData, weekday == 1)
mondayData$dteday = as.Date(mondayData$dteday, format = "%Y-%m-%d")
set.seed(1)
mondayIndex <- createDataPartition(mondayData$cnt, p = 0.7, list = FALSE)
mondayTrain <- mondayData[mondayIndex, ]
mondayTest <- mondayData[-mondayIndex, ]
head(mondayTrain)
dayData <- read_csv("day.csv")
mondayData <- filter(dayData, weekday == 1)
set.seed(1)
mondayIndex <- createDataPartition(mondayData$cnt, p = 0.7, list = FALSE)
mondayTrain <- mondayData[mondayIndex, ]
mondayTest <- mondayData[-mondayIndex, ]
head(mondayTrain)
dayData <- read_csv("day.csv")
mondayData <- filter(dayData, weekday == 1)
set.seed(1)
mondayIndex <- createDataPartition(mondayData$cnt, p = 0.7, list = FALSE)
mondayTrain <- mondayData[mondayIndex, ]
mondayTest <- mondayData[-mondayIndex, ]
head(mondayTrain)
dayData <- read_csv("day.csv")
mondayData <- filter(dayData, weekday == 1)
mondayData$dteday = as.Date(mondayData$dteday, format = "%Y-%m-%d")
set.seed(1)
mondayIndex <- createDataPartition(mondayData$cnt, p = 0.7, list = FALSE)
mondayTrain <- mondayData[mondayIndex, ]
mondayTest <- mondayData[-mondayIndex, ]
head(mondayTrain)
dayData <- read_csv("day.csv")
mondayData <- filter(dayData, weekday == 1)
mondayData$dteday = as.Date(mondayData$dteday, format = "%Y-%m-%d")
set.seed(1)
mondayIndex <- createDataPartition(mondayData$cnt, p = 0.7, list = FALSE)
mondayTrain <- mondayData[mondayIndex, ]
mondayTest <- mondayData[-mondayIndex, ]
head(mondayTrain)
dayData <- read_csv("day.csv")
mondayData <- filter(dayData, weekday == 1)
mondayData <- mondayData[,-1]
cols <- c("season", "yr", "mnth", "holiday", "weekday", "workingday", "weathersit")
mondayData[cols] <- lapply(mondayData[cols], factor)
mondayData$dteday = as.Date(mondayData$dteday, format = "%Y-%m-%d")
set.seed(1)
mondayIndex <- createDataPartition(mondayData$cnt, p = 0.7, list = FALSE)
mondayTrain <- mondayData[mondayIndex, ]
mondayTest <- mondayData[-mondayIndex, ]
head(mondayTrain)
dayData <- read_csv("day.csv")
mondayData <- filter(dayData, weekday == 1)
mondayData <- mondayData[,-1]
cols <- c("season", "yr", "mnth", "holiday", "weekday", "workingday", "weathersit")
mondayData$dteday = as.Date(mondayData$dteday, format = "%Y-%m-%d")
set.seed(1)
mondayIndex <- createDataPartition(mondayData$cnt, p = 0.7, list = FALSE)
mondayTrain <- mondayData[mondayIndex, ]
mondayTest <- mondayData[-mondayIndex, ]
head(mondayTrain)
dayData <- read_csv("day.csv")
mondayData <- filter(dayData, weekday == 1)
mondayData <- mondayData[,-1]
cols <- c("season", "yr", "mnth", "holiday", "weekday", "workingday", "weathersit")
mondayData$dteday = as.Date(mondayData$dteday, format = "%Y-%m-%d")
set.seed(1)
mondayIndex <- createDataPartition(mondayData$cnt, p = 0.7, list = FALSE)
mondayTrain <- mondayData[mondayIndex, ]
mondayTest <- mondayData[-mondayIndex, ]
head(mondayTrain)
# Read data and filter by day
dayData <- read_csv("day.csv")
mondayData <- filter(dayData, weekday == 1)
mondayData <- mondayData[,-1]
# Convert categorical variables to factors
mondayData$season <- as.factor(mondayData$season)
mondayData$yr <- as.factor(mondayData$yr)
mondayData$mnth <- as.factor(mondayData$mnth)
mondayData$holiday <- as.factor(mondayData$holiday)
mondayData$weekday <- as.factor(mondayData$weekday)
mondayData$workingday <- as.factor(mondayData$workingday)
mondayData$weathersit <- as.factor(mondayData$weathersit)
# Split data to train and test sets
set.seed(1)
mondayIndex <- createDataPartition(mondayData$cnt, p = 0.7, list = FALSE)
mondayTrain <- mondayData[mondayIndex, ]
mondayTest <- mondayData[-mondayIndex, ]
mondayTrain
# Summarize training dataset
knitr::kable(summary(mondayTrain))
# Contingency table
table(mondayTrain$season, mondayTrain$holiday)
mondayTrain
# Summarize training dataset
knitr::kable(summary(mondayTrain))
# Contingency table
table(mondayTrain$season, mondayTrain$holiday)
table(mondayTrain$workingday,  mondayTrain$weathersi)
mondayTrain
# Summarize training dataset
knitr::kable(summary(mondayTrain))
# Contingency table
table(mondayTrain$season, mondayTrain$holiday)
table(mondayTrain$workingday, mondayTrain$weathersi)
mondayTrain
# Summarize training dataset
knitr::kable(summary(mondayTrain))
# Contingency table
table(mondayTrain$season, mondayTrain$holiday)
table(mondayTrain$weathersi, mondayTrain$workingday)
mondayTrain
# Summarize training dataset
knitr::kable(summary(mondayTrain))
# Contingency table
table(mondayTrain$season, mondayTrain$holiday)
mondayTrain$weathersi
mondayTrain$workingday
table(mondayTrain$weathersi, mondayTrain$workingday)
mondayTrain
# Summarize training dataset
knitr::kable(summary(mondayTrain))
# Contingency table
table(mondayTrain$season, mondayTrain$holiday)
mondayTrain$weathersi
mondayTrain
# Summarize training dataset
knitr::kable(summary(mondayTrain))
# Contingency table
table(mondayTrain$season, mondayTrain$holiday)
table(mondayTrain$weathersit, mondayTrain$workingday)
mondayTrain
# Summarize training dataset
knitr::kable(summary(mondayTrain))
# Contingency table
table(mondayTrain$workingday, mondayTrain$holiday)
table(mondayTrain$weathersit, mondayTrain$season)
# Summarize training data set
knitr::kable(summary(mondayTrain))
# Contingency table
table(mondayTrain$workingday, mondayTrain$holiday)
table(mondayTrain$weathersit, mondayTrain$season)
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, error = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
require(rmarkdown)
require(knitr)
require(dplyr)
require(tidyverse)
require(ggplot2)
require(caret)
# Read data and filter by day
dayData <- read_csv("day.csv")
mondayData <- filter(dayData, weekday == 1)
mondayData <- mondayData[,-1]
# Convert categorical variables to factors
cols <- c("season", "yr", "mnth", "holiday", "weekday",
"workingday", "weathersit")
mondayData[cols] <- lapply(mondayData[cols], factor)
mondayData$dteday = as.Date(mondayData$dteday, format = "%Y-%m-%d")
# Split data to train and test sets
set.seed(1)
mondayIndex <- createDataPartition(mondayData$cnt, p = 0.7, list = FALSE)
mondayTrain <- mondayData[mondayIndex, ]
mondayTest <- mondayData[-mondayIndex, ]
# Summarize training data set
knitr::kable(summary(mondayTrain))
# Contingency table
table(mondayTrain$workingday, mondayTrain$holiday)
table(mondayTrain$weathersit, mondayTrain$season)
# Summarize training data set
summary(mondayTrain)
# Contingency table
table(mondayTrain$workingday, mondayTrain$holiday)
table(mondayTrain$weathersit, mondayTrain$season)
# Summarize training data set
knitr::kable(summary(mondayTrain))
# Contingency table
table(mondayTrain$workingday, mondayTrain$holiday)
table(mondayTrain$weathersit, mondayTrain$season)
# Summarize training data set
summary(mondayTrain)
# Contingency table
table(mondayTrain$workingday, mondayTrain$holiday)
table(mondayTrain$weathersit, mondayTrain$season)
# Read data and filter by day
dayData <- read_csv("day.csv")
mondayData <- filter(dayData, weekday == 1)
mondayData <- mondayData[,-1]
# Split data to train and test sets
set.seed(1)
mondayIndex <- createDataPartition(mondayData$cnt, p = 0.7, list = FALSE)
mondayTrain <- mondayData[mondayIndex, ]
mondayTest <- mondayData[-mondayIndex, ]
# Convert categorical variables to factors
mondayData$dteday = as.Date(mondayData$dteday, format = "%Y-%m-%d")
cols <- c("season", "yr", "mnth", "holiday", "weekday",
"workingday", "weathersit")
mondayTrain[cols] <- lapply(mondayTrain[cols], factor)
mondayTest[cols] <- lapply(mondayTest[cols], factor)
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, error = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
require(rmarkdown)
require(knitr)
require(dplyr)
require(tidyverse)
require(ggplot2)
require(caret)
# Read data and filter by day
dayData <- read_csv("day.csv")
mondayData <- filter(dayData, weekday == 1)
mondayData <- mondayData[,-1]
# Split data to train and test sets
set.seed(1)
mondayIndex <- createDataPartition(mondayData$cnt, p = 0.7, list = FALSE)
mondayTrain <- mondayData[mondayIndex, ]
mondayTest <- mondayData[-mondayIndex, ]
# Convert categorical variables to factors
mondayData$dteday = as.Date(mondayData$dteday, format = "%Y-%m-%d")
cols <- c("season", "yr", "mnth", "holiday", "weekday",
"workingday", "weathersit")
mondayTrain[cols] <- lapply(mondayTrain[cols], factor)
mondayTest[cols] <- lapply(mondayTest[cols], factor)
# Summarize training data set
summary(mondayTrain)
# Contingency table
table(mondayTrain$workingday, mondayTrain$holiday)
table(mondayTrain$weathersit, mondayTrain$season)
# Summarize training data set
knitr::kable(summary(mondayTrain))
# Contingency table
table(mondayTrain$workingday, mondayTrain$holiday)
table(mondayTrain$weathersit, mondayTrain$season)
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, error = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
require(rmarkdown)
require(knitr)
require(dplyr)
require(tidyverse)
require(ggplot2)
require(caret)
# Read and clean data
dayData <- read_csv("day.csv")
dayData <- filter(dayData, weekday == 1)
dayData <- select(dayData, -c(instant, weekday))
dayData$dteday = as.Date(dayData$dteday, format = "%Y-%m-%d")
# Split data to train and test sets
set.seed(1)
dayIndex <- createDataPartition(dayData$cnt, p = 0.7, list = FALSE)
dayTrain <- dayData[mondayIndex, ]
dayTest <- dayData[-mondayIndex, ]
# Convert categorical variables to factors
cols <- c("season", "yr", "mnth", "holiday", "workingday", "weathersit")
dayTrain[cols] <- lapply(dayTrain[cols], factor)
dayTest[cols] <- lapply(dayTest[cols], factor)
# Summarize training data set
knitr::kable(summary(dayTrain))
# Contingency table
table(dayTrain$workingday, dayTrain$holiday)
table(dayTrain$weathersit, dayTrain$season)
lmFit <- train(cnt ~ ., data = dayTrain,
method = "lm",
preProcess = c("center", "scale"),
trControl = trainControl(method = "cv", number = 10))
lmFit <- train(cnt ~ ., data = dayTrain,
method = "lm",
preProcess = c("center", "scale"),
trControl = trainControl(method = "cv", number = 10))
rfFit <- train(cnt ~ ., data = dayTrain,
method = "rf",
preProcess = c("center", "scale"),
trControl = trainControl(method = "cv",
number = 5),
tuneGrid = data.frame(mtry = 1:9)
)
lmFit <- train(cnt ~ ., data = dayTrain,
method = "lm",
preProcess = c("center", "scale"),
trControl = trainControl(method = "cv", number = 10))
lmFit
lmFit <- train(cnt ~ ., data = dayTrain,
method = "glm",
family = "poisson"
preProcess = c("center", "scale"),
trControl = trainControl(method = "cv", number = 10))
lmFit
lmFit <- train(cnt ~ ., data = dayTrain,
method = "glm",
family = "poisson",
preProcess = c("center", "scale"),
trControl = trainControl(method = "cv", number = 10))
lmFit
rfFit <- train(cnt ~ ., data = dayTrain,
method = "rf",
preProcess = c("center", "scale"),
trControl = trainControl(method = "cv",
number = 5),
tuneGrid = data.frame(mtry = 1:9)
)
rfFit
# Set up fold number (10) for the cross validation and the repeated times (5) of the whole CV
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
# Set seed for reproducible
set.seed(123)
# Fit the boosted tree model with cnt as response and all other variables as
# predictors on training set
boostedTree_fit <- train(cnt ~., data = dayTrain,
method = "gbm",
verbose = FALSE,
trControl = trctrl, # Passing trainControl() method
preProcess = c("center", "scale")) # Standardize the training dataset
boostedTree_fit
lmFit <- train(cnt ~ ., data = dayTrain,
method = "lm",
#preProcess = c("center", "scale"),
trControl = trainControl(method = "cv", number = 10))
lmFit <- train(cnt ~ ., data = dayTrain,
method = "lm",
#preProcess = c("center", "scale"),
trControl = trainControl(method = "cv", number = 10))
lmFit
lmFit <- train(cnt ~ ., data = dayTrain,
method = "glm",
preProcess = c("center", "scale"),
trControl = trainControl(method = "cv", number = 10))
lmFit
fit <- lm(cnt ~ ., data = dayTrain)
summary(fit)
# Read and clean data
dayData <- read_csv("day.csv")
dayData <- filter(dayData, weekday == 1)
median(dayData$cnt)
dayData <- select(dayData, -c(instant, weekday))
dayData$dteday = as.Date(dayData$dteday, format = "%Y-%m-%d")
# Split data to train and test sets
set.seed(1)
dayIndex <- createDataPartition(dayData$cnt, p = 0.7, list = FALSE)
dayTrain <- dayData[mondayIndex, ]
dayTest <- dayData[-mondayIndex, ]
# Convert categorical variables to factors
cols <- c("season", "yr", "mnth", "holiday", "workingday", "weathersit")
dayTrain[cols] <- lapply(dayTrain[cols], factor)
dayTest[cols] <- lapply(dayTest[cols], factor)
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, error = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
# Read and clean data
dayData <- read_csv("day.csv")
dayData <- filter(dayData, weekday == 1)
dayData <- select(dayData, -c(instant, weekday))
dayData$dteday = as.Date(dayData$dteday, format = "%Y-%m-%d")
# Split data to train and test sets
set.seed(1)
dayIndex <- createDataPartition(dayData$cnt, p = 0.7, list = FALSE)
dayTrain <- dayData[dayIndex, ]
dayTest <- dayData[-dayIndex, ]
# Convert categorical variables to factors
cols <- c("season", "yr", "mnth", "holiday", "workingday", "weathersit")
dayTrain[cols] <- lapply(dayTrain[cols], factor)
dayTest[cols] <- lapply(dayTest[cols], factor)
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, error = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
require(rmarkdown)
require(knitr)
require(dplyr)
require(tidyverse)
require(ggplot2)
require(caret)
library(readr)
# Read and clean data
dayData <- read_csv("day.csv")
dayData <- filter(dayData, weekday == 1)
dayData <- select(dayData, -c(instant, weekday))
dayData$dteday = as.Date(dayData$dteday, format = "%Y-%m-%d")
# Split data to train and test sets
set.seed(1)
dayIndex <- createDataPartition(dayData$cnt, p = 0.7, list = FALSE)
dayTrain <- dayData[dayIndex, ]
dayTest <- dayData[-dayIndex, ]
# Convert categorical variables to factors
cols <- c("season", "yr", "mnth", "holiday", "workingday", "weathersit")
dayTrain[cols] <- lapply(dayTrain[cols], factor)
dayTest[cols] <- lapply(dayTest[cols], factor)
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, error = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
require(rmarkdown)
require(knitr)
require(dplyr)
require(tidyverse)
require(ggplot2)
require(caret)
# Read and clean data
dayData <- read_csv("day.csv")
dayData <- filter(dayData, weekday == 1)
dayData <- select(dayData, -c(instant, weekday))
dayData$dteday = as.Date(dayData$dteday, format = "%Y-%m-%d")
# Split data to train and test sets
set.seed(1)
dayIndex <- createDataPartition(dayData$cnt, p = 0.7, list = FALSE)
dayTrain <- dayData[dayIndex, ]
dayTest <- dayData[-dayIndex, ]
# Convert categorical variables to factors
cols <- c("season", "yr", "mnth", "holiday", "workingday", "weathersit")
dayTrain[cols] <- lapply(dayTrain[cols], factor)
dayTest[cols] <- lapply(dayTest[cols], factor)
# Summarize training data set
knitr::kable(summary(dayTrain))
# Contingency table
table(dayTrain$workingday, dayTrain$holiday)
table(dayTrain$weathersit, dayTrain$season)
glmFit <- train(cnt ~ ., data = dayTrain,
method = "glm",
family = "poisson",
preProcess = c("center", "scale"),
trControl = trainControl(method = "cv", number = 10))
glmFit
lmFit <- train(cnt ~ ., data = dayTrain,
method = "glm",
preProcess = c("center", "scale"),
trControl = trainControl(method = "cv", number = 10))
lmFit
# Set up fold number (10) for the cross validation and the repeated times (5) of the whole CV
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
# Set seed for reproducible
set.seed(123)
# Fit the random forest model with cnt as response and all other variables as
# predictors on training set
rfFit <- train(cnt ~ ., data = dayTrain,
method = "rf",
preProcess = c("center", "scale"),
trControl = trctrl)
rfFit
# Set up fold number (10) for the cross validation and the repeated times (5) of the whole CV
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
# Set seed for reproducible
set.seed(123)
# Fit the boosted tree model with cnt as response and all other variables as
# predictors on training set
boostedTree_fit <- train(cnt ~., data = dayTrain,
method = "gbm",
verbose = FALSE,
trControl = trctrl, # Passing trainControl() method
preProcess = c("center", "scale")) # Standardize the training dataset
boostedTree_fit
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, error = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
require(rmarkdown)
require(knitr)
require(dplyr)
require(tidyverse)
require(ggplot2)
require(caret)
# Read and clean data
dayData <- read_csv("day.csv")
dayData <- filter(dayData, weekday == 1)
dayData <- select(dayData, -c(instant, weekday))
dayData$dteday = as.Date(dayData$dteday, format = "%Y-%m-%d")
# Split data to train and test sets
set.seed(1)
dayIndex <- createDataPartition(dayData$cnt, p = 0.7, list = FALSE)
dayTrain <- dayData[dayIndex, ]
dayTest <- dayData[-dayIndex, ]
# Convert categorical variables to factors
cols <- c("season", "yr", "mnth", "holiday", "workingday", "weathersit")
dayTrain[cols] <- lapply(dayTrain[cols], factor)
dayTest[cols] <- lapply(dayTest[cols], factor)
# Summarize training data set
knitr::kable(summary(dayTrain))
# Contingency table
table(dayTrain$workingday, dayTrain$holiday)
table(dayTrain$weathersit, dayTrain$season)
glmFit <- train(cnt ~ ., data = dayTrain,
method = "glm",
family = "poisson",
preProcess = c("center", "scale"),
trControl = trainControl(method = "cv", number = 10))
glmFit
lmFit <- train(cnt ~ ., data = dayTrain,
method = "glm",
preProcess = c("center", "scale"),
trControl = trainControl(method = "cv", number = 10))
lmFit
# Set up fold number (10) for the cross validation and the repeated times (5) of the whole CV
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
# Set seed for reproducible
set.seed(123)
# Fit the random forest model with cnt as response and all other variables as
# predictors on training set
rfFit <- train(cnt ~ ., data = dayTrain,
method = "rf",
preProcess = c("center", "scale"),
trControl = trctrl)
rfFit
# Set up fold number (10) for the cross validation and the repeated times (5) of the whole CV
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
# Set seed for reproducible
set.seed(123)
# Fit the boosted tree model with cnt as response and all other variables as
# predictors on training set
boostedTree_fit <- train(cnt ~., data = dayTrain,
method = "gbm",
verbose = FALSE,
trControl = trctrl, # Passing trainControl() method
preProcess = c("center", "scale")) # Standardize the training dataset
boostedTree_fit
